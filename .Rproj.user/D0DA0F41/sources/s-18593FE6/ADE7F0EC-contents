
library("caret")
#library(RSQLite)
#library("DBI")
#library("pryr")
#library("protr")
library("gridExtra")
library("gbm")
library("reshape2")
result_dir = "/Users/xlong3/lab_work_data/machine_learning_cdr/proline_classifier/"
save_file2 = paste(c(result_dir,"10foldcvblast",".rds"),collapse="")
path="/Users/xlong3/lab_work_data/machine_learning_cdr/proline_classifier/rmsd_cluster_hits_rmsd/"
best_parameter_loop_file="/Users/xlong3/lab_work_data/machine_learning_cdr/proline_classifier/best_parameters_each_loop.rds"
all_pred_tables_list=readRDS(file= save_file2) 
all_pred_tables_list=lapply(all_pred_tables_list,function(x){lapply(x,function(y){y[,5]=sapply(strsplit(as.character(y[,5]),"\\."),"[[",1);return(y)})})
best_parameters_each_loop=readRDS(file=best_parameter_loop_file)

data_by_loop_type_list_unduplicated=readRDS("/Users/xlong3/lab_work_data/machine_learning_cdr/proline_classifier/data_by_loop_type_list_unduplicated_no_filtering.rds")
data_by_loop_type_list_unduplicated=lapply(data_by_loop_type_list_unduplicated,function(x){a=x[[1]];a$cluster_type=a$fullcluster;x[[1]]=a; return(x)})
  
  
  loops_with_cis=names(data_by_loop_type_list_unduplicated)#[unlist(lapply(data_by_loop_type_list_unduplicated,function(x){any(grepl("cis",as.character(unique(x[[1]]$cluster_type))))}))]
  loops_with_cis=loops_with_cis[!loops_with_cis%in%c("H1_14","H1_15","H2_12","L1_17","L1_10","L2_12")]
  #loops_with_cis=loops_with_cis[loops_with_cis!="H1_13"]
all_the_merged_comparision=list()
accu_summary=list()
for(this_loop in loops_with_cis){
print(this_loop)
  # get the accuracy for blast
distinguish= table(do.call(rbind,all_pred_tables_list[[this_loop]])[,4],do.call(rbind,all_pred_tables_list[[this_loop]])[,5])/3
# blast 
accuracy=as.data.frame(distinguish)
accuracy_cis=accuracy[grepl("cis",accuracy[,2])|grepl("cis",accuracy[,1]),]

accuracy_all=sum(accuracy[,3])
accuracy2=sum(accuracy[as.character(accuracy$Var1)!=as.character(accuracy$Var2),3])
accuracy2_cis=sum(accuracy_cis[as.character(accuracy_cis$Var1)!=as.character(accuracy_cis$Var2),3])

rr=accuracy[as.character(accuracy[,1])!=as.character(accuracy[,2]),]

conf=as.data.frame.matrix(distinguish);  conf_ratio=conf; apply(conf,1,function(x){x/sum(unlist(x))})
#gbm 


for(x in 1:dim(conf_ratio)[1]) conf_ratio[x,]=conf_ratio[x,]/sum(unlist(conf_ratio[x,]))
conf_number=melt(as.matrix(conf));  conf_number=conf_number[as.character(conf_number$Var1)!=as.character(conf_number$Var2),]

melted_conf=melt(as.matrix(conf_ratio))
selected_conf=melted_conf[as.character(melted_conf[,1])!=as.character(melted_conf[,2]),]
selected_conf_merged=merge(selected_conf,conf_number,by=c("Var1","Var2"))
selected_conf_merged=selected_conf_merged[order(selected_conf_merged[,3],decreasing=TRUE),]
selected_conf_merged_blind_blast=selected_conf_merged[selected_conf_merged$value.x!=0,]



# find out loops that involves cis clusters 



pattern= paste(c(this_loop,"_gbm_test-north-",paste(unlist(best_parameters_each_loop[[this_loop]][,c("interaction.depth", "n.trees", "shrinkage", "n.minobsinnode")]),collapse="-"),"_trained_model_extra_test.rds"),collapse = "")
model=readRDS(file=paste(c(path,pattern),collapse=""))
if(this_loop=="H1_13"){
  model=readRDS(file="/Users/xlong3/lab_work_data/machine_learning_cdr/proline_classifier/rmsd_cluster_hits_rmsd/H1_13_xgboost-north-9-1200-0.01-5_trained_model_extra_test.rds")
}
conf=as.data.frame.matrix(table(model$pred$obs,model$pred$pred))




if(!this_loop %in% c("L3_9","H1_13","H2_10")){
  conf=conf/3
}
accuracy_gbm=melt(as.matrix(conf))
accuracy_gbm_cis=accuracy_gbm[grepl("cis",accuracy_gbm[,2])|grepl("cis",accuracy_gbm[,1]),]
accuracy_all_gbm=sum(accuracy_gbm[,3])
accuracy2_gbm=sum(accuracy_gbm[accuracy_gbm$Var1!=accuracy_gbm$Var2,3])
accuracy2_gbm_cis=sum(accuracy_gbm_cis[accuracy_gbm_cis$Var1!=accuracy_gbm_cis$Var2,3])
rd=accuracy_gbm[accuracy_gbm[,1]!=accuracy_gbm[,2],]

rr=as.data.frame(rr); rd=as.data.frame(rd)
rr$type=paste(rr[,1],rr[,2],sep="");rd$type=paste(rd[,1],rd[,2],sep=""); rd$type=gsub("_","-",rd$type)
thisc=data_by_loop_type_list_unduplicated[["H2_10"]][[1]]
apply(thisc[thisc$cluster_type=="H2-10-6",paste("V",2:11,sep="")],1,function(x){paste(unlist(x),collapse="")})
thisc[thisc$cluster_type=="H2-10-1",]



sum_spe=merge(rr,rd,by="type")
sum_spe$improve=sum_spe[,4]-sum_spe[,7]
whic=which(sum_spe$improve>5)
sum_spe[whic,]


accu_summary[[this_loop]]=1-accuracy2_gbm/accuracy_all_gbm
accu_summary[[this_loop]]=c(accuracy2,accuracy_all,accuracy2_gbm,accuracy_all_gbm,accuracy2_cis,accuracy2_gbm_cis)



conf_ratio=conf
apply(conf,1,function(x){x/sum(unlist(x))})
for(x in 1:dim(conf_ratio)[1]){
  conf_ratio[x,]=conf_ratio[x,]/sum(unlist(conf_ratio[x,]))
}
conf_number=melt(as.matrix(conf))
conf_number=conf_number[conf_number$Var1!=conf_number$Var2,]
thisc=data_by_loop_type_list_unduplicated[["H2_10"]][[1]]


melted_conf=melt(as.matrix(conf_ratio))
selected_conf=melted_conf[melted_conf[,1]!=melted_conf[,2],]
selected_conf_merged=merge(selected_conf,conf_number,by=c("Var1","Var2"))
selected_conf_merged=selected_conf_merged[order(selected_conf_merged[,3],decreasing=TRUE),]
selected_conf_merged=selected_conf_merged[selected_conf_merged$value.x!=0,]
selected_conf_merged$Var1=gsub("_","-",selected_conf_merged$Var1)
selected_conf_merged$Var2=gsub("_","-",selected_conf_merged$Var2)

selected_conf_merged_blind_blast$method="blind-blast"
selected_conf_merged$method="gbm"
selected_conf_merged_blind_blast=selected_conf_merged_blind_blast#[selected_conf_merged_blind_blast$value.y>=1,]
selected_conf_merged=selected_conf_merged[apply(selected_conf_merged[,c("Var1","Var2")],1,function(x){paste(x,collapse="")})%in%apply(selected_conf_merged_blind_blast[,c("Var1","Var2")],1,function(x){paste(x,collapse="")}),]

the_merged_comparision=rbind(selected_conf_merged_blind_blast,selected_conf_merged)
the_merged_comparision$wrong_prediction=paste(sapply(as.character(the_merged_comparision$Var1),function(x){ paste(strsplit(as.character(x),"-")[[1]][3:length(strsplit(as.character(x),"-")[[1]])],collapse="-")  }),sapply(as.character(the_merged_comparision$Var2),function(x){paste(strsplit(as.character(x),"-")[[1]][3:length(strsplit(as.character(x),"-")[[1]])],collapse="-")}),sep="_")
the_merged_comparision$wrong_prediction=sapply(strsplit(the_merged_comparision$wrong_prediction,"\\."),"[[",1)

names(the_merged_comparision)[3:4]=c("ratio","case_number")
the_merged_comparision$loop=rep(this_loop,dim(the_merged_comparision)[1])
all_the_merged_comparision[[this_loop]]=the_merged_comparision
}
summary_frame=data.frame(do.call(rbind,accu_summary))
summary_frame$types=unlist(res)
summary_frame$diff=summary_frame[,"X1"]-summary_frame[,"X3"]
summary_frame$cis_diff=summary_frame[,"X5"]-summary_frame[,"X6"]
original=1-sum(summary_frame[,1])/sum(summary_frame[,4])
increased=1-sum(summary_frame[,3])/sum(summary_frame[,4])
increased-original

summ=summary_frame[,c("X1","diff")]
#names(summ)[2]="diff"
summ$loop=rownames(summ)
values=melt(summ,id.vars=c("loop"))
values$variable=as.character(values$variable)
values[values$variable=="X1","variable"]=rep("BLAST",length(values[values$variable=="X1","variable"]))
values[values$variable=="diff","variable"]=rep("GBM",length(values[values$variable=="diff","variable"]))
names(values)[2]="methods"
order1=values[values$methods=="GBM","loop"][order(values[values$methods=="GBM","value"],decreasing=TRUE)]
values$loop=factor(values$loop,levels=order1)
p=ggplot(values)+geom_bar(aes(x=loop,y=value,fill=methods),stat = "identity" ,position=position_dodge(width = 0.90))+
  ggtitle("GBM improved classification counts") +theme(plot.title = element_text(hjust = 0.5))+ylab("count")+
  theme(text = element_text(size=11), axis.text.x = element_text(angle=90, hjust=1)) 
ggsave(p,file="error.pdf", width=4.5,height=3.5,units = c( "in"),limitsize = FALSE)


bind_all_the_merged_comparision=do.call(rbind,all_the_merged_comparision)
#bind_all_the_merged_comparision=bind_all_the_merged_comparision[grepl("cis",bind_all_the_merged_comparision$wrong_prediction),]
#bind_all_the_merged_comparision_sub=bind_all_the_merged_comparision[bind_all_the_merged_comparision]
spllited_frames=split(bind_all_the_merged_comparision,paste(bind_all_the_merged_comparision$wrong_prediction,bind_all_the_merged_comparision$loop,sep=""))

for(name_a in names(spllited_frames)){
  x=spllited_frames[[name_a]]
  if(dim(as.data.frame(x))[1]==1){
    new_result=rbind(as.data.frame(x),as.data.frame(x))
    #print(new_result)
    new_result[2,"method"]=ifelse(new_result[1,"method"] == "blind-blast", "gbm", "blind-blast")
    new_result[2,"case_number"]=0
    new_result[2,"ratio"]=0
    print(new_result)
    spllited_frames[[name_a]]=new_result
  }else{
    print(x)
    
    
  }
}
spllited_frames_table=do.call(rbind,spllited_frames)
the_merged_comparision_melted=melt( (spllited_frames_table[,3:7]),id=c( "method"   ,     "wrong_prediction","loop"))


#the_merged_comparision_melted_L3_9=the_merged_comparision_melted[the_merged_comparision_melted$loop=="L3_9",]
#the_merged_comparision_melted=the_merged_comparision_melted[the_merged_comparision_melted$loop!="L3_9",]
ggplot(the_merged_comparision_melted, aes(x=wrong_prediction, y=value,shape=variable, 
                                          color=method))  + geom_point(aes(size = value)) +facet_wrap(loop~variable,scales="free" ,ncol=4)+ggtitle("gbm vs blindblast performance in L3_9 cluster prediction") +theme(plot.title = element_text(hjust = 0.5))+
  theme(text = element_text(size=11), axis.text.x = element_text(angle=90, hjust=1)) 


legend_plot=ggplot(data=the_merged_comparision_melted_cases) +
  geom_bar(stat = "identity", aes(x=wrong_prediction, y=value, fill=method) ,position=position_dodge(width = 0.90))+
  facet_grid(~loop,scales = "free_x", space="free")+ theme(plot.margin=unit(c(2,0,0,2),"mm"),axis.title.x=element_blank(),axis.title.y=element_text(angle=90),axis.text.x=element_blank(),axis.ticks.x = element_blank())+ylab('case number')
g_legend<-function(a.gplot){ 
  tmp <- ggplot_gtable(ggplot_build(a.gplot)) 
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box") 
  legend <- tmp$grobs[[leg]] 
  return(legend)} 

legend <- g_legend(legend_plot)

p1=ggplot(data=the_merged_comparision_melted_cases) +
  geom_bar(stat = "identity", aes(x=wrong_prediction, y=value, fill=method) ,position=position_dodge(width = 0.90))+
  facet_grid(~loop,scales = "free_x", space="free")+ theme(plot.margin=unit(c(2,0,0,2),"mm"),axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x = element_blank())+ylab('case number')+ theme(legend.position = "none")


the_merged_comparision_melted_cases=the_merged_comparision_melted[the_merged_comparision_melted$variable=="case_number",]
the_merged_comparision_melted_cases$real=sapply(strsplit(the_merged_comparision_melted_cases$wrong_prediction,"_"),"[[",1)
the_merged_comparision_melted_cases$pred=sapply(strsplit(the_merged_comparision_melted_cases$wrong_prediction,"_"),"[[",2)
rec=which(the_merged_comparision_melted_cases$real=="1")
prec=which(the_merged_comparision_melted_cases$pred=="1")
others=(1:dim(the_merged_comparision_melted_cases)[1])[!(1:dim(the_merged_comparision_melted_cases)[1]) %in%c(rec,prec)]
the_merged_comparision_melted_cases[rec,"type"]=rep("cluster_1_reco",length(rec))
the_merged_comparision_melted_cases[prec,"type"]=rep("cluster_1_prec",length(prec))
the_merged_comparision_melted_cases[others,"type"]=rep("non_1",length(others))


split_t=split(the_merged_comparision_melted_cases,paste(the_merged_comparision_melted_cases$loop,the_merged_comparision_melted_cases$type,the_merged_comparision_melted_cases$method,sep=""))
summarized_data=do.call(rbind,lapply(split_t,function(x){y=x[1,]; 
y[["value"]]=sum(as.numeric(x$value));return(y)}))


p1=ggplot(data=summarized_data) +
  geom_bar(stat = "identity", aes(x=type, y=value, fill=method),position=position_dodge(width = 0.90))+
  facet_grid(~loop,scales = "free_x", space="free")+ 
  theme(plot.margin=unit(c(2,0,0,2),"mm"),
        axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.text.y = element_text(size=14),
        axis.ticks.x = element_blank())+
  ylab('case number')+ theme(legend.position = "none")+ylab("case number")+
  theme(strip.text.x = element_text(size = 8))


p1=ggplot(data=the_merged_comparision_melted_cases) +
  geom_bar(stat = "identity", aes(x=type, y=value, fill=method),position=position_dodge(width = 0.90))+
  facet_grid(~loop,scales = "free_x", space="free")+ 
  theme(plot.margin=unit(c(2,0,0,2),"mm"),
        axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.text.y = element_text(size=14),
        axis.ticks.x = element_blank())+
  ylab('case number')+ theme(legend.position = "none")+ylab("case number")+
  theme(strip.text.x = element_text(size = 8))




the_merged_comparision_melted_ratio=the_merged_comparision_melted[the_merged_comparision_melted$variable=="ratio",]
p2=ggplot(data=the_merged_comparision_melted_ratio) +
  geom_bar(stat = "identity", aes(x=wrong_prediction, y=value, fill=method) ,position=position_dodge(width = 0.90))+
  facet_grid(~loop,scales = "free_x", space="free")+ 
  theme(plot.margin=unit(c(2,0,0,2),"mm"),
        axis.title.x=element_blank(),
        axis.title.y=element_text(angle=90),
        axis.text.x= element_text( angle=90,hjust=1) ,  
        axis.text.y = element_text(size=8))+
  ylab("ratio")+ ylim(0, 1)+
  theme(legend.position = "none",strip.text.x = element_text(size = 8))


grids=list()
grids[[1]]=p1
grids[[2]]=p2
p=grid.arrange(arrangeGrob(grids[[1]],grids[[2]], ncol=1, nrow=2, heights=c(2,1),top = textGrob("gbm vs blindblast performance in cis conformation cluster prediction",gp=gpar(fontsize=18)) ,bottom=textGrob("wrong prediction type", gp=gpar(fontsize=14))  ),  arrangeGrob(legend, ncol=1, nrow=1),  widths=c(5,1))
file_name="/Users/xlong3/lab_work_data/machine_learning_cdr/proline_classifier/cis_cluster_rescue_summary.png"
tempfile_name="/Users/xlong3/lab_work_data/machine_learning_cdr/proline_classifier/cluster_rescue_summary.pdf"


ggsave(p,file=tempfile_name, width=100,height=30,units = c( "in"),limitsize = FALSE)


# plot the variable importance in helping finding the results
gbmImp <- varImp(model, scale = TRUE)
#
var_import=as.data.frame(gbmImp[[1]]); var_import$var=rownames(var_import)
var_import=var_import[order(gbmImp[[1]][,1],decreasing=TRUE),]
var_import=var_import[1:20,]
var_import=var_import[order(var_import[,1],decreasing=FALSE),]
var_import$var=factor(var_import$var,levels=var_import$var)
var_import$var=substring(var_import$var,2)
number=as.numeric(substr(var_import$var,1,nchar(var_import$var)-1))-11
res=substring(var_import$var,nchar(var_import$var))
var_import$var=paste(number,res,sep="")
var_import$var=factor(var_import$var,levels=var_import$var)

ggplot(var_import,aes(x=var,y=Overall, fill = "red"))+
  geom_bar(stat="identity")+coord_flip()+ 
  ggtitle("Residue importance for classifying L3_9 using gbm") +
  theme(plot.title = element_text(hjust = 0.5),
        legend.position = "none")+xlab("relative important")+ylab("residue features")

file_name="/Users/xlong3/lab_work_data/machine_learning_cdr/proline_classifier/feature_importance_L3_9.png"
ggsave(file=file_name, width=200,height=200,units = c( "mm"))
gbmImp <- varImp(model, scale = TRUE)



var_import$var

