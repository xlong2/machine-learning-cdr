# This script should be run after  blind_blast_comparison.R


result_dir = "./proline_classifier/"
save_file2 = paste(c(result_dir,"10foldcvblast",".rds"),collapse="")

all_pred_tables_list=readRDS(file= save_file2) 
save_file3 = paste(c(result_dir,"all_pred_tables_realcluster_list",".rds"),collapse="")
all_pred_tables_realcluster_list=readRDS(save_file3)



ten_foldcv_blindblastlist


get("abc")


rmsds_true_cluster_by_loop=list()
rmsds_unmatched_by_loop=list()
for(the_loop in names(ten_foldcv_blindblastlist)){
   for(each_fold in 1){
    result=all_pred_tables_list[[the_loop]][[each_fold]]
    result=do.call(rbind,all_pred_tables_list[[the_loop]])
    lapply(all_pred_tables_list[[the_loop]],function(x){x[sapply(strsplit(as.character(x[,5]),"\\."),"[[",1)!=x[,4],]})
    selected_result = result[sapply(strsplit(as.character(result[,5]),"\\."),"[[",1)!=result[,4],]
    if(dim(selected_result)[1]==0)
    {
      break
    }
    tab_real = ten_foldcv_blindblastlist[[the_loop]][[each_fold]]
    tab_real=do.call(rbind,ten_foldcv_blindblastlist[[the_loop]])
    tab_real=tab_real[tab_real$V4!="",]
    tab_real[,6]=rownames(tab_real)
    tab_real=tab_real[!grepl("none",tab_real[,4])& !grepl("none",tab_real[,5]),]
    
    
    
    
    # retrive the rmsd
    # load the distmat according to the loop type

    
    rmsds_unmatched=c()
    query_pdb=substr(sapply(strsplit(rownames(selected_result),"\\."),"[[",2),1,4)
    template_pdb=substr(sapply(strsplit(as.character(selected_result[,5]),"\\."),"[[",2),1,4)
    selected_result=selected_result[!grepl("none",selected_result[,4])& !grepl("none",selected_result[,5]),]
    if(dim(selected_result)[1]==0){
      break()
    }
    for(index in 1:dim(selected_result)[1]){
      rmsd=NA
      tryCatch({
        

        xmatches1 <- intersect(grep(query_pdb[index],rownames(distmat_value),fixed=TRUE),grep(substr(the_loop,1,2),rownames(distmat_value),fixed=TRUE))[1]
        xmatches2 <- intersect(grep(template_pdb[index],colnames(distmat_value),fixed=TRUE),grep(substr(the_loop,1,2),colnames(distmat_value),fixed=TRUE))[1]
        if(!is.na(xmatches1) & !is.na(xmatches2)){
        rmsd=distmat_value[xmatches1,xmatches2]}else{rmsd=NA}
        },error=function(e){})
      if(!is.na(rmsd)&!is.null(rmsd)){
      if(rmsd>10 ){
        rmsd=NA
      }
      }
      query_cluster=strsplit(as.character(rownames(selected_result)[index]),"\\.")[[1]][1]
      template_cluster=strsplit(as.character(selected_result[index,5]),"\\.")[[1]][1]
      rmsds_unmatched=c(rmsds_unmatched,rmsd)
      cat(c(the_loop,query_pdb[index],query_cluster,template_pdb[index],template_cluster,rmsd,"rmsd_cluster_unmatched"),sep="\t",append=TRUE,file=paste(c("/Users/xlong3/lab_work_data/machine_learning_cdr/rmsd_problem.log",the_loop),collapse=""))
      cat("\n",append=TRUE,file=paste(c("/Users/xlong3/lab_work_data/machine_learning_cdr/rmsd_problem.log",the_loop),collapse=""))
    }
    
    rmsds_true_cluster=c()
    query_pdb=substr(sapply(strsplit(rownames(tab_real),"\\."),"[[",2),1,4)
    template_pdb=substr(sapply(strsplit(as.character(tab_real[,5]),"\\."),"[[",2),1,4)
    
    for(index in 1:dim(tab_real)[1]){
      rmsd=NA
      tryCatch({

        xmatches1 <- intersect(grep(query_pdb[index],rownames(distmat_value),fixed=TRUE),grep(substr(the_loop,1,2),rownames(distmat_value),fixed=TRUE))[1]
        xmatches2 <- intersect(grep(template_pdb[index],colnames(distmat_value),fixed=TRUE),grep(substr(the_loop,1,2),colnames(distmat_value),fixed=TRUE))[1]
        if(!is.na(xmatches1) & !is.na(xmatches2)){
          rmsd=distmat_value[xmatches1,xmatches2]}else{rmsd=NA}
        },error=function(e){})

     if(!is.na(rmsd)&!is.null(rmsd)){
        if(rmsd>10 ){
          rmsd=NA
        }
      }
      query_cluster=NA;template_cluster=NA
      query_cluster=strsplit(as.character(rownames(tab_real)[index]),"\\.")[[1]][1]
      template_cluster=strsplit(as.character(tab_real[index,5]),"\\.")[[1]][1]
      rmsds_true_cluster=c(rmsds_true_cluster,rmsd)
      cat(c(the_loop,query_pdb[index],query_cluster,template_pdb[index],template_cluster,rmsd,"rmsd_cluster_matched"),sep="\t",append=TRUE,file=paste(c("/Users/xlong3/lab_work_data/machine_learning_cdr/rmsd_problem.log",the_loop),collapse=""))
      cat("\n",append=TRUE,file=paste(c("/Users/xlong3/lab_work_data/machine_learning_cdr/rmsd_problem.log",the_loop),collapse=""))
      
      
      rmsd=""
    }
    rmsds_true_cluster_all_folds=c(rmsds_true_cluster_all_folds,rmsds_true_cluster)
    
    rmsds_unmatched_all_folds=c(rmsds_unmatched_all_folds,rmsds_unmatched)
    
    mean_rmsds_true_cluster_all_folds = mean(unlist(rmsds_true_cluster_all_folds))
    mean_rmsds_unmatched_all_folds = mean(unlist(rmsds_unmatched_all_folds))
    rmsds_true_cluster_by_loop[[the_loop]]=rmsds_true_cluster_all_folds
    rmsds_unmatched_by_loop[[the_loop]]=rmsds_unmatched_all_folds
    
  }
  
  

}

saveRDS(rmsds_true_cluster_by_loop,file="/Users/xlong3/lab_work_data/machine_learning_cdr/proline_classifier/rmsds_true_cluster_by_loop.rds")
saveRDS(rmsds_unmatched_by_loop,file="/Users/xlong3/lab_work_data/machine_learning_cdr/proline_classifier/mean_rmsds_unmatched_all_folds.rds")


rmsds_unmatched_by_loop=readRDS("/Users/xlong3/lab_work_data/machine_learning_cdr/proline_classifier/mean_rmsds_unmatched_all_folds.rds")
rmsds_true_cluster_by_loop=readRDS("/Users/xlong3/lab_work_data/machine_learning_cdr/proline_classifier/rmsds_true_cluster_by_loop.rds")
a=list()
rmsds_unmatched_by_loop_frame=do.call(rbind,lapply(names(rmsds_unmatched_by_loop),function(y){print(y);x=rmsds_unmatched_by_loop[[y]];print(x);if(length(x)!=0){aframe=as.data.frame(t(as.data.frame(x)));
aframe$loop=rep(y,length(x));aframe$annotate=rep("unmatched",length(x));return(aframe)}else{return(NULL)}}))

rmsds_true_cluster_by_loop_frame=do.call(rbind,lapply(names(rmsds_true_cluster_by_loop),function(y){print(y);x=rmsds_true_cluster_by_loop[[y]];print(x);if(length(x)!=0){aframe=as.data.frame(t(as.data.frame(x)));
aframe$loop=rep(y,length(x));aframe$annotate=rep("matched",length(x));return(aframe)}else{return(NULL)}}))
data_frame=rbind(rmsds_true_cluster_by_loop_frame,rmsds_unmatched_by_loop_frame)


a[[1]]=lapply(rmsds_unmatched_by_loop,function(x){mean(unlist(x),na.rm=TRUE)})
a[[2]]=lapply(rmsds_unmatched_by_loop,function(x){sd(unlist(x),na.rm=TRUE)})
a[[3]]=lapply(rmsds_true_cluster_by_loop,function(x){mean(unlist(x),na.rm=TRUE)})
a[[4]]=lapply(rmsds_true_cluster_by_loop,function(x){sd(unlist(x),na.rm=TRUE)})
a=as.data.frame(do.call(rbind,a))
a=as.data.frame(do.call(rbind,lapply(a,function(x){as.numeric(x)})))

a=as.data.frame(t(as.data.frame(a)))
c=as.data.frame(t(a))
c$loop_type=rownames(c)
e=c[,c(1:2,5)];colnames(e)=c("mean","sd","loop"); e$type=rep("unmatched",dim(e)[1])


f=c[,3:5];colnames(f)=c("mean","sd","loop"); f$type=rep("matched",dim(f)[1])

frame=rbind(e,f)
frame$mean=as.numeric(as.character(frame$mean)); frame$sd=as.numeric(as.character(frame$sd)); 
split_frame=split(frame,frame$loop)
sorted_loop_order=names(split_frame)[order(unlist(lapply(split_frame,function(x){x[x$type=="unmatched","mean"]-x[x$type=="matched","mean"]})))]
frame$loop=factor(frame$loop,levels=sorted_loop_order)
data_frame$loop=factor(data_frame$loop,levels=sorted_loop_order)
ggplot(frame,aes(x=loop,y=mean,ymin=mean-1/2*sd,ymax=mean+1/2*sd,color=type) )+ggtitle("The right cluster vs wrong cluster template query rmsd")+theme(plot.title = element_text(hjust = 0.5))+
  ylab("mean query vs template rmsd")+
  geom_point(data=data_frame,aes(x=loop,y=V1,color=annotate),alpha=0.3,position = position_jitterdodge(jitter.width=0.1,jitter.height=0.0,dodge.width = 0.4),inherit.aes = FALSE)+geom_point(size=5,shape=9)+geom_errorbar()

data_frame$loop_length=sapply(strsplit(as.character(data_frame$loop),"_"),"[[",2)
data_frame$loop_type=sapply(strsplit(as.character(data_frame$loop),"_"),"[[",1)

names=lapply(split(data_frame,data_frame$loop_type),function(y){
  num_s=lapply(split(y,y$loop_length),function(x){mean(x[x$annotate=="unmatched","V1"],na.rm = TRUE)-mean(x[x$annotate=="matched","V1"],na.rm = TRUE)})
  sorted_length=names(sort(unlist(num_s)))
  return(sorted_length)
})


data_frame_r=do.call(rbind,lapply(split(data_frame,data_frame$loop_type),function(y){
  num_s=lapply(split(y,y$loop_length),function(x){median(x[x$annotate=="unmatched","V1"],na.rm=TRUE)-median(x[x$annotate=="matched","V1"],na.rm=TRUE)})
  sorted_length=names(sort(unlist(num_s))); y$loop_length=factor(y$loop_length,levels=sorted_length);y=y[order(y$loop_length),];y$loop_length=as.character(y$loop_length) ;print(y$loop_length);return(y)  }))

data_frame_r$loop_length=as.character(data_frame_r$loop_length)
data_frame_r$loop=factor(data_frame_r$loop,levels=unique(data_frame_r$loop))
data_frame_r=data_frame_r[!is.na(data_frame_r$V1),]
ggplot(data_frame_r)+ggtitle("The right cluster vs wrong cluster template query rmsd")+
  theme(plot.title = element_text(hjust = 0.5))+
  ylab("Query vs template rmsd")+facet_grid(.~loop_type,scales = "free", space="free")+
  geom_boxplot(aes(x=loop,y=V1,color=annotate),alpha=0.3,inherit.aes = FALSE)+ 
  theme_classic()
ggsave(file="plot.pdf",width=7,height=4,unit="in")

# not showing up plot
file_name="/Users/xlong3/lab_work_data/machine_learning_cdr/proline_classifier/right_wrong_rmsd.png"

data_frame_r_H1_13=data_frame_r[data_frame_r$loop=="H1_13",]
ggplot(data_frame_r_H1_13)+ggtitle("The right cluster vs wrong cluster template query rmsd")+theme(plot.title = element_text(hjust = 0.5))+
  ylab("Query vs template rmsd")+facet_grid(.~loop_type,scales = "free", space="free")+
  geom_boxplot(aes(x=loop,y=V1,color=annotate),alpha=0.3,inherit.aes = FALSE)+ theme_classic()


ggsave(file=file_name,width=300,height=200, units = c( "mm"))



