overall_prefix="./proline_classifier/Data_processed"
#file=paste(c(overall_prefix,"/data_by_loop_type_list_unduplicated_no_filtering_original.rds"),collapse = "")
#data_by_loop_type_list_unduplicated=readRDS(file)
data_by_loop_type_list_unduplicated=data_by_loop_type_list_unduplicated_for_blindBLAST
subsitution_matrix_name ="wahtw"  #"/Volumes/lab/macbook/lab_work_data/vall_rmsd/loop_sub_matrix.csv"
subsitution_matrix="PAM30"
result_dir = "./proline_classifier/Data_processed/"
mkcommand=paste(c("mkdir ",result_dir), collapse=" ")
system(mkcommand)
methods= c(the_method) # specify the machine learning methods to be used
each_method=the_method
# end of iterating all folds
the_method="somerandommethod"
data(AAPAM30)
AAPAM30_index=1:20
names(AAPAM30_index)=rownames(AAPAM30)
direct=getwd()
plot_dir="./proline_classifier/Plots/"
save_file1="./proline_classifier/Data_processed/overall_accuracy.rds"
save_file3 = paste(c(result_dir,"all_pred_tables_realcluster_list",".rds"),collapse="")
all_pred_tables_realcluster_list=readRDS(save_file3)
overall_accuracy=readRDS(save_file1)
setwd("./proline_classifier/")
file.sources = list.files(pattern="*functions.R")
sapply(file.sources,source,.GlobalEnv)
file.sources = list.files(pattern="*function.R")
sapply(file.sources,source,.GlobalEnv)
setwd(direct)
setwd("./proline_classifier/Data_processed/")
data.sources = list.files(pattern="*.rds")
for(x in data.sources){
print(x)
tryCatch({
x_name=strsplit(x,"\\.")[[1]][1]
assign(x_name,readRDS(x));print("successfully loaded")},error=function(e) {e})
}
lapply(data_by_loop_type_list_unduplicated,function(x){dim(x[[1]])})
# modify all all_similarity_matrix names to H1-13-
# modify the nofiltering to make the cluster_type column and also the identifier column to match to that of the
setwd(direct)
gbmGrid
gbmGrid
gbmGrid=data.frame(interaction.depth=as.numeric(interaction.depth),n.trees=as.numeric(n.trees),shrinkage=as.numeric(shrinkage),n.minobsinnode=as.numeric(n.minobsinnode))
args=c( "H1_13", 4, 6, 1500, 0.01, 5)
print(args)
print(args[[2]])
print(args[2])
loop_type=args[1]
num_core=as.numeric(args[2])
interaction.depth=as.numeric(args[3])
n.trees=as.numeric(args[4])
shrinkage=as.numeric(args[5])
n.minobsinnode=as.numeric(args[6])
registerDoMC(num_core)
gbmGrid=data.frame(interaction.depth=as.numeric(interaction.depth),n.trees=as.numeric(n.trees),shrinkage=as.numeric(shrinkage),n.minobsinnode=as.numeric(n.minobsinnode))
gbmGrid
paste(c("Rscript 2.gbm_train_test_splitted_grid.R ",paste(args,collapse=" ")),collapse=" ")
for(loop in names(data_by_loop_type_list_unduplicated)){
nl=dim(data_by_loop_type_list_unduplicated[[loop]][[1]])[1]
eta=max (0.01, 0.1*min(1, nl/10000))
args=c( loop, core, complexity_n, the_tree_n, eta, min_node_n)
Rscript_command_line=paste(c("Rscript 2.gbm_train_test_splitted_grid.R ",paste(args,collapse=" ")),collapse=" ")
}
help(writeLines)
help(write)
Rscript_command_line=paste(c("Rscript 2.gbm_train_test_splitted_grid.R ",paste(args,collapse=" ")),collapse=" ")
exe_sh_file=paste(c(args,"_exe.sh"),collapse=" ")
write(Rscript_command_line, file = exe_sh_file )
exe_sh_file
exe_sh_file=paste(c(args,"_exe.sh"),collapse="")
write(Rscript_command_line, file = exe_sh_file )
geexe_sh_file
exe_sh_file
exe_sh_file=paste(c(args,"exe.sh"),collapse="_")
write(Rscript_command_line, file = exe_sh_file )
exe_sh_file
getwd()
Rscript_command_line
exe_sh_file
getwd()
getwd()
script_dire="/Users/longxiyao/Google Drive/2018_spring/lab_work_data/machine_learning_cdr/proline_classifier"
script_dire="/Users/longxiyao/Google Drive/2018_spring/lab_work_data/machine_learning_cdr/proline_classifier/"
exe_sh_file=paste(c(script_dire,args,"exe.sh"),collapse="_")
write(Rscript_command_line, file = exe_sh_file )
script_dire="/Users/longxiyao/Google Drive/2018_spring/lab_work_data/machine_learning_cdr/proline_classifier/"
help(write)
write(paste(c("cd ",script_dire),collapse=" "), file = exe_sh_file )
write(Rscript_command_line, file = exe_sh_file,append=TRUE )
getwd()
exe_sh_file
exe_sh_file=paste(c(args,"exe.sh"),collapse="_")
write(paste(c("cd ",script_dire),collapse=" "), file = exe_sh_file )
write(Rscript_command_line, file = exe_sh_file,append=TRUE )
script_dire="./proline_classifier/"
Rscript_command_line=paste(c("Rscript 2.gbm_train_test_splitted_grid.R ",paste(args,collapse=" ")),collapse=" ")
exe_sh_file=paste(c(args,"exe.sh"),collapse="_")
write(paste(c("cd ",script_dire),collapse=" "), file = exe_sh_file )
write(Rscript_command_line, file = exe_sh_file,append=TRUE )
con_file=paste(c(args,".con"),collapse="_")
write(paste(c("cd ",script_dire),collapse=" "), file = exe_sh_file )
write(Rscript_command_line, file = exe_sh_file,append=TRUE )
system(paste(c("cp ", master_file," ",condor_script_dir, con_file),collapse=""))
master_file="/home/xlong/condor_script_master.con"
condor_script_dir="/home/xlong/CDR_canonical/machine_learning_cdr_April/machine_learning_cdr/proline_classifier/condor_script/"
paste(c("cat /home/xlong/condor_script_master.con  | sed -e \"s/\$argument1/",exe_sh_file,"/g\""),collapse="")
paste(c("cat /home/xlong/condor_script_master.con  | sed -e \"s\/\$argument1/",exe_sh_file,"/g\""),collapse="")
paste(c("cat /home/xlong/condor_script_master.con  | sed -e \"s\\/\$argument1/",exe_sh_file,"/g\""),collapse="")
"cat /home/xlong/condor_script_master.con  | sed -e \"s\\/\$argument1/"
"cat /home/xlong/condor_script_master.con  | sed -e \"s"
"cat /home/xlong/condor_script_master.con  | sed -e \"s\\"
"cat /home/xlong/condor_script_master.con  | sed -e \"s\"
"cat /home/xlong/condor_script_master.con  | sed -e \"s/\"
"cat /home/xlong/condor_script_master.con  | sed -e \"s/"
"cat /home/xlong/condor_script_master.con  | sed -e \"s/\\"
"cat /home/xlong/condor_script_master.con  | sed -e \"s//\"
"cat /home/xlong/condor_script_master.con  | sed -e \"s/\"
"cat /home/xlong/condor_script_master.con  | sed -e \"s/\\"
"cat /home/xlong/condor_script_master.con  | sed -e \"s/\\\"
"cat /home/xlong/condor_script_master.con  | sed -e \"s/\"
"cat /home/xlong/condor_script_master.con  | sed -e \"s/\\"
"cat /home/xlong/condor_script_master.con  | sed -e \"s/\\"
"cat /home/xlong/condor_script_master.con  | sed -e \"s/\\$argument1/"
paste(c("cat /home/xlong/condor_script_master.con  | sed -e \"s/\\$argument1/",exe_sh_file,"/g\""),collapse="")
paste(c("cat /home/xlong/condor_script_master.con  | sed -e \"s/\\$argument1/",exe_sh_file,"/g"),collapse="")
paste(c("cat /home/xlong/condor_script_master.con  | sed -e \"s/\$argument1/",exe_sh_file,"/g"),collapse="")
paste(c("cat /home/xlong/condor_script_master.con  | sed -e \"s/\\$argument1/",exe_sh_file,"/g"),collapse="")
command=paste(c("cat /home/xlong/condor_script_master.con  | sed -e \"s/\\$argument1/",exe_sh_file,"/g  > ", script_dire,con_file),collapse="")
command
command=paste(c("cat ",condor_script_dir, con_file,"  | sed -e \"s/\\$argument1/",exe_sh_file,"/g  > ", script_dire,con_file),collapse="")
command
# write condor script
system(paste(c("cp ", master_file," ",condor_script_dir, con_file),collapse=""))
command=paste(c("cat ",condor_script_dir, con_file,"  | sed -e \"s/\\$argument1/",exe_sh_file,"/g  > ", script_dire,con_file),collapse="")
a=paste(c("condor_submit ", condor_script_dir,con_file),collapse="")
a
executable
executable=paste(args, collapse="")
executable
executable=paste(args, collapse="_")
executable
executable=paste(args, collapse="_")
exe_sh_file=paste(c(executable,"exe.sh"),collapse="_")  # customize shell script name
con_file=paste(c(executable,".con"),collapse="_")  #customize condor script name
Rscript_command_line=paste(c("Rscript 2.gbm_train_test_splitted_grid.R ",paste(args,collapse=" ")),collapse=" ")    # write shell script
write(paste(c("cd ",script_dire),collapse=" "), file = exe_sh_file )
write(Rscript_command_line, file = exe_sh_file,append=TRUE )
# write condor script
system(paste(c("cp ", master_file," ",condor_script_dir, con_file),collapse=""))   # copy the master file to script directory
master_file
executable_dir="./proline_classifier/"
master_condor_file="/home/xlong/condor_script_master.con"
condor_script_dir="/home/xlong/CDR_canonical/machine_learning_cdr_April/machine_learning_cdr/proline_classifier/condor_script/"
executable_dir="./proline_classifier/"
condor_script_dir="/Users/longxiyao/Google\ Drive/2018_spring/lab_work_data/machine_learning_cdr/proline_classifier/"
nl=dim(data_by_loop_type_list_unduplicated[[loop]][[1]])[1]
eta=max (0.01, 0.1*min(1, nl/10000))
args=c( loop, cores, complexity_n, the_tree_n, eta, min_node_n)
executable=paste(args, collapse="_")
exe_sh_file=paste(c(executable,"exe.sh"),collapse="_")  # customize shell script name
con_file=paste(c(executable,".con"),collapse="_")  #customize condor script name
cores=4;
args=c( loop, cores, complexity_n, the_tree_n, eta, min_node_n)
executable=paste(args, collapse="_")
exe_sh_file=paste(c(executable,"exe.sh"),collapse="_")  # customize shell script name
con_file=paste(c(executable,".con"),collapse="_")  #customize condor script name
Rscript_command_line=paste(c("Rscript 2.gbm_train_test_splitted_grid.R ",paste(args,collapse=" ")),collapse=" ")    # write shell script
complexity_n=3
args=c( loop, cores, complexity_n, the_tree_n, eta, min_node_n)
executable=paste(args, collapse="_")
exe_sh_file=paste(c(executable,"exe.sh"),collapse="_")  # customize shell script name
the_tree_n=10
eta=0.01
min_node_n=5
args=c( loop, cores, complexity_n, the_tree_n, eta, min_node_n)
executable=paste(args, collapse="_")
exe_sh_file=paste(c(executable,"exe.sh"),collapse="_")  # customize shell script name
con_file=paste(c(executable,".con"),collapse="_")  #customize condor script name
Rscript_command_line=paste(c("Rscript 2.gbm_train_test_splitted_grid.R ",paste(args,collapse=" ")),collapse=" ")    # write shell script
write(paste(c("cd ",script_dire),collapse=" "), file = exe_sh_file )
write(Rscript_command_line, file = exe_sh_file,append=TRUE )
# write condor script
system(paste(c("cp ", master_file," ",condor_script_dir, con_file),collapse=""))   # copy the master file to script directory
paste(c("cp ", master_file," ",condor_script_dir, con_file),collapse="")
condor_script_dir="/Users/longxiyao/Google\\ Drive/2018_spring/lab_work_data/machine_learning_cdr/proline_classifier/"
# write condor script
system(paste(c("cp ", master_file," ",condor_script_dir, con_file),collapse=""))   # copy the master file to script directory
command=paste(c("cat ",condor_script_dir, con_file,"  | sed -e \"s/\\$executable/",exe_sh_file,"/g  > ", condor_script_dir,con_file),collapse="")
command=paste(c("cat",condor_script_dir, con_file,"  | sed -e \"s/\\$condor_script_dir/",condor_script_dir,"/g > ", condor_script_dir,con_file),collapse="")
command=paste(c("cat",condor_script_dir, con_file,"  | sed -e \"s/\\$cores/",cores,"/g > ", condor_script_dir,con_file),collapse="")
# write condor script
system(paste(c("cp ", master_file," ",condor_script_dir, con_file),collapse=""))   # copy the master file to script directory
# write condor script
system(paste(c("cp ", master_condor_file," ",condor_script_dir, con_file),collapse=""))   # copy the master file to script directory
master_condor_file
master_condor_file="/Users/longxiyao/condor_script_master.con"
# write condor script
system(paste(c("cp ", master_condor_file," ",condor_script_dir, con_file),collapse=""))   # copy the master file to script directory
command=paste(c("cat ",condor_script_dir, con_file,"  | sed -e \"s/\\$executable/",exe_sh_file,"/g  > ", condor_script_dir,con_file),collapse="")
command=paste(c("cat",condor_script_dir, con_file,"  | sed -e \"s/\\$condor_script_dir/",condor_script_dir,"/g > ", condor_script_dir,con_file),collapse="")
command=paste(c("cat",condor_script_dir, con_file,"  | sed -e \"s/\\$cores/",cores,"/g > ", condor_script_dir,con_file),collapse="")
print(paste(c( condor_script_dir,con_file),collapse=""))
master_condor_file="/Users/longxiyao/condor_script_master.sh"
condor_script_dir="/Users/longxiyao/Google\\ Drive/2018_spring/lab_work_data/machine_learning_cdr/proline_classifier/"
eta=max (0.01, 0.1*min(1, nl/10000))
args=c( loop, cores, complexity_n, the_tree_n, eta, min_node_n)
executable=paste(args, collapse="_")
exe_sh_file=paste(c(executable,"exe.sh"),collapse="_")  # customize shell script name
con_file=paste(c(executable,".con"),collapse="_")  #customize condor script name
Rscript_command_line=paste(c("Rscript 2.gbm_train_test_splitted_grid.R ",paste(args,collapse=" ")),collapse=" ")    # write shell script
write(paste(c("cd ",script_dire),collapse=" "), file = exe_sh_file )
write(Rscript_command_line, file = exe_sh_file,append=TRUE )
# write condor script
system(paste(c("cp ", master_condor_file," ",condor_script_dir, con_file),collapse=""))   # copy the master file to script directory
command=paste(c("cat ",condor_script_dir, con_file,"  | sed -e \"s/\\$executable/",exe_sh_file,"/g  > ", condor_script_dir,con_file),collapse="")
command=paste(c("cat",condor_script_dir, con_file,"  | sed -e \"s/\\$condor_script_dir/",condor_script_dir,"/g > ", condor_script_dir,con_file),collapse="")
command=paste(c("cat",condor_script_dir, con_file,"  | sed -e \"s/\\$cores/",cores,"/g > ", condor_script_dir,con_file),collapse="")
print(paste(c( condor_script_dir,con_file),collapse=""))
setwd(condor_script_dir)
condor_script_dir
condor_script_dir="/Users/longxiyao/Google\ Drive/2018_spring/lab_work_data/machine_learning_cdr/proline_classifier/"
setwd(condor_script_dir)
condor_script_dir
eta=max (0.01, 0.1*min(1, nl/10000))
args=c( loop, cores, complexity_n, the_tree_n, eta, min_node_n)
executable=paste(args, collapse="_")
exe_sh_file=paste(c(executable,"exe.sh"),collapse="_")  # customize shell script name
con_file=paste(c(executable,".con"),collapse="_")  #customize condor script name
Rscript_command_line=paste(c("Rscript 2.gbm_train_test_splitted_grid.R ",paste(args,collapse=" ")),collapse=" ")    # write shell script
write(paste(c("cd ",script_dire),collapse=" "), file = exe_sh_file )
write(Rscript_command_line, file = exe_sh_file,append=TRUE )
# write condor script
system(paste(c("cp ", master_condor_file," ", con_file),collapse=""))   # copy the master file to script directory
command=paste(c("cat ", con_file,"  | sed -e \"s/\\$executable/",exe_sh_file,"/g  > ", condor_script_dir,con_file),collapse="")
command=paste(c("cat", con_file,"  | sed -e \"s/\\$condor_script_dir/",condor_script_dir,"/g > ", condor_script_dir,con_file),collapse="")
command=paste(c("cat", con_file,"  | sed -e \"s/\\$cores/",cores,"/g > ", condor_script_dir,con_file),collapse="")
nl=dim(data_by_loop_type_list_unduplicated[[loop]][[1]])[1]
eta=max (0.01, 0.1*min(1, nl/10000))
args=c( loop, cores, complexity_n, the_tree_n, eta, min_node_n)
executable=paste(args, collapse="_")
exe_sh_file=paste(c(executable,"exe.sh"),collapse="_")  # customize shell script name
con_file=paste(c(executable,".con"),collapse="_")  #customize condor script name
Rscript_command_line=paste(c("Rscript 2.gbm_train_test_splitted_grid.R ",paste(args,collapse=" ")),collapse=" ")    # write shell script
write(paste(c("cd ",script_dire),collapse=" "), file = exe_sh_file )
write(Rscript_command_line, file = exe_sh_file,append=TRUE )
# write condor script
system(paste(c("cp ", master_condor_file," ", con_file),collapse=""))   # copy the master file to script directory
command=paste(c("cat ", con_file,"  | sed -e \"s/\\$executable/",exe_sh_file,"/g  > ", con_file),collapse="")
command=paste(c("cat", con_file,"  | sed -e \"s/\\$condor_script_dir/",condor_script_dir,"/g > ", con_file),collapse="")
command=paste(c("cat", con_file,"  | sed -e \"s/\\$cores/",cores,"/g > ", con_file),collapse="")
print(paste(c( condor_script_dir,con_file),collapse=""))
a=paste(c("condor_submit ", condor_script_dir,con_file),collapse="")
a
# write condor script
system(paste(c("cp ", master_condor_file," ", con_file),collapse=""))   # copy the master file to script directory
getwd()
con_file
command=paste(c("cat ", con_file,"  | sed -e \"s/\\$executable/",exe_sh_file,"/g  > ", con_file),collapse="")
system(command)
command=paste(c("cat", con_file,"  | sed -e \"s/\\$condor_script_dir/",condor_script_dir,"/g > ", con_file),collapse="")
command
command=paste(c("cat ", con_file,"  | sed -e \"s/\$executable/",exe_sh_file,"/g  > ", con_file),collapse="")
command=paste(c("cat ", con_file,"  | sed -e \"s/\\$executable/",exe_sh_file,"/g  > ", con_file),collapse="")
command
command=paste(c("cat ", con_file,"  | sed -e \"s/\\$executable/",exe_sh_file,"/g\"  > ", con_file),collapse="")
command
system(command)
command=paste(c("cat ", con_file,"  | sed -e \"s/'"$executable"'/",exe_sh_file,"/g\"  > ", con_file),collapse="")
command=paste(c("cat ", con_file,"  | sed -e \"s/'\"$executable\"'/",exe_sh_file,"/g\"  > ", con_file),collapse="")
command
system(command)
# write condor script
system(paste(c("cp ", master_condor_file," ", con_file),collapse=""))   # copy the master file to script directory
"s/$old_run/$new_run/"
command=paste(c("cat ", con_file,"  | sed -e \"s/'\"$executable\"'/",exe_sh_file,"/g\"  > ", con_file),collapse="")
system(command)
paste(c("sed ","\"s/\$executable/",r_str,"/g\"", exe_sh_file, " > ",con_file),collapse="")
paste(c("sed ","\"s/'$'executable/",r_str,"/g\"", exe_sh_file, " > ",con_file),collapse="")
paste(c("sed ","\"s/'$'executable/",exe_sh_file,"/g\"", exe_sh_file, " > ",con_file),collapse="")
paste(c("sed ","\"s/\\$executable/",exe_sh_file,"/g\"", exe_sh_file, " > ",con_file),collapse="")
# write condor script
system(paste(c("cp ", master_condor_file," ", con_file),collapse=""))   # copy the master file to script directory
paste(c("sed \"s/\\$executable/",exe_sh_file,"/g\"", exe_sh_file, " > ",con_file),collapse="")
paste(c("sed \"s/\\$executable/",exe_sh_file,"/g\" ", exe_sh_file, " > ",con_file),collapse="")
## Replace Merry Christmas with Happy New Year
for( f in filenames ){
x <- readLines(f)
y <- gsub( "$executable", exe_sh_file, x )
y <- gsub( "$condor_script_dir", condor_script_dir, y )
y <- gsub( "$cores", cores, y )
cat(y, file=f, sep="\n")
}
x <- readLines(con_file)
y <- gsub( "$executable", exe_sh_file, x )
y <- gsub( "$condor_script_dir", condor_script_dir, y )
y <- gsub( "$cores", cores, y )
cat(y, file=con_file, sep="\n")
con_file
# write condor script
system(paste(c("cp ", master_condor_file," ", con_file),collapse=""))   # copy the master file to script directory
con_file
getwd()
command=paste(c("cat ", con_file,"  | sed -e \"s/'\"$executable\"'/",exe_sh_file,"/g\"  > ", con_file),collapse="")
x <- readLines(con_file)
y <- gsub( "$executable", exe_sh_file, x )
y <- gsub( "$condor_script_dir", condor_script_dir, y )
y <- gsub( "$cores", cores, y )
cat(y, file=con_file, sep="\n")
y
exe_sh_file
x <- readLines(con_file)
y <- gsub( "$executable", exe_sh_file, x )
y
x
y <- gsub( "\$executable", exe_sh_file, x )
y <- gsub( "\\$executable", exe_sh_file, x )
y
x <- readLines(con_file)
y <- gsub( "\\$executable", exe_sh_file, x )
y <- gsub( "\\$condor_script_dir", condor_script_dir, y )
y <- gsub( "\\$cores", cores, y )
cat(y, file=con_file, sep="\n")
condor_script_dir="/Users/longxiyao/Google\ Drive/2018_spring/lab_work_data/machine_learning_cdr/proline_classifier/condor_script"
setwd(condor_script_dir)
nl=dim(data_by_loop_type_list_unduplicated[[loop]][[1]])[1]
eta=max (0.01, 0.1*min(1, nl/10000))
paras=best_parameters_each_loop[[loop]]
args=c(loop,core,paras[["interaction.depth"]],paras[["n.trees"]], eta,5)
executable=paste(args, collapse="_")
core=4;
executable_dir="./proline_classifier/"
master_condor_file="/Users/longxiyao/condor_script_master.sh"
condor_script_dir="/Users/longxiyao/Google\ Drive/2018_spring/lab_work_data/machine_learning_cdr/proline_classifier/condor_script"
setwd(condor_script_dir)
nl=dim(data_by_loop_type_list_unduplicated[[loop]][[1]])[1]
eta=max (0.01, 0.1*min(1, nl/10000))
paras=best_parameters_each_loop[[loop]]
args=c(loop,core,paras[["interaction.depth"]],paras[["n.trees"]], eta,5)
executable=paste(args, collapse="_")
exe_sh_file=paste(c(executable,"exe.sh"),collapse="_")  # customize shell script name
con_file=paste(c(executable,".con"),collapse="_")  #customize condor script name
Rscript_command_line=paste(c("Rscript 2.gbm_train_test_splitted_grid.R ",paste(args,collapse=" ")),collapse=" ")    # write shell script
write(paste(c("cd ",script_dire),collapse=" "), file = exe_sh_file )
write(Rscript_command_line, file = exe_sh_file,append=TRUE )
# write condor script
system(paste(c("cp ", master_condor_file," ", con_file),collapse=""))   # copy the master file to script directory
"s/$old_run/$new_run/"
x <- readLines(con_file)
y <- gsub( "\\$executable", exe_sh_file, x )
y <- gsub( "\\$condor_script_dir", condor_script_dir, y )
y <- gsub( "\\$cores", cores, y )
cat(y, file=con_file, sep="\n")
print(paste(c( condor_script_dir,con_file),collapse=""))
a=paste(c("condor_submit ", condor_script_dir,con_file),collapse="")
a
#   File2:    Mean of the three best templated for each sequence and stored as a table  :
#               seq
#                H1_13-1.4312    1.003    1.0023  2.323  3.22
#                ...
#
# Input:
#
#   loop_type : "H2_9"
#   the_method  "blindblast"
#   cluster_dis :   "north"  / "rmsd"
list.of.packages <- c("Matrix", "grid","caret","MLmetrics","parallel","pryr","protr","gbm","ggplot2","reshape2","gridExtra","doMC")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
#   File2:    Mean of the three best templated for each sequence and stored as a table  :
#               seq
#                H1_13-1.4312    1.003    1.0023  2.323  3.22
#                ...
#
# Input:
#
#   loop_type : "H2_9"
#   the_method  "blindblast"
#   cluster_dis :   "north"  / "rmsd"
list.of.packages <- c("Matrix", "grid","caret","MLmetrics","parallel","pryr","protr","gbm","ggplot2","reshape2","gridExtra","doMC")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
for(pack in list.of.packages){
library(pack)
}
pack
for(pack in list.of.packages){
library(get(pack))
}
pack
library(get(pack))
library(pack,character.only = T)
pack
for(pack in list.of.packages){
library(pack,character.only = T)
}
#   File2:    Mean of the three best templated for each sequence and stored as a table  :
#               seq
#                H1_13-1.4312    1.003    1.0023  2.323  3.22
#                ...
#
# Input:
#
#   loop_type : "H2_9"
#   the_method  "blindblast"
#   cluster_dis :   "north"  / "rmsd"
list.of.packages <- c("Matrix", "grid","caret","MLmetrics","parallel","pryr","protr","gbm","ggplot2","reshape2","gridExtra","doMC","RColorBrewer")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
for(pack in list.of.packages){
library(pack,character.only = T)
}
list.of.packages <- c("Matrix", "grid","caret","MLmetrics","parallel","pryr","protr","gbm","ggplot2","reshape2","gridExtra","doMC","RColorBrewer","e1071")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
for(pack in list.of.packages){
library(pack,character.only = T)
}
setwd("..")
source('./proline_classifier/0.load_function_and_data.R')
getwd()
setwd("..")
source('./proline_classifier/0.load_function_and_data.R')
list.of.packages <- c("Matrix", "grid","caret","MLmetrics","parallel","pryr","protr","gbm","ggplot2","reshape2","gridExtra","doMC","RColorBrewer","e1071")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
for(pack in list.of.packages){
library(pack,character.only = T)
}
list.of.packages <- c("Matrix", "grid","caret","MLmetrics","parallel","pryr","protr","gbm","ggplot2","reshape2","gridExtra","doMC","RColorBrewer","e1071")
install_and_load_packages<-function(package_list,local_package_dir){
new.packages <- list.of.packages[!(package_list %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages,lib=local_package_dir)
for(pack in package_list){
library(pack,character.only = T)
}
}
x <- readLines(con_file)
con_file
system(paste(c("sh ",exe_sh_file),collapse=""))
nl=dim(data_by_loop_type_list_unduplicated[[loop]][[1]])[1]
eta=max (0.01, 0.1*min(1, nl/10000))
args=c( loop, cores, complexity_n, the_tree_n, eta, min_node_n)
args
loop_type=args[1]
num_core=args[2]
interaction.depth=args[3]
n.trees=args[4]
shrinkage=args[5]
n.minobsinnode=args[6]
registerDoMC(num_core)
gbmGrid=data.frame(interaction.depth=as.numeric(interaction.depth),n.trees=as.numeric(n.trees),shrinkage=as.numeric(shrinkage),n.minobsinnode=as.numeric(n.minobsinnode))
parameter_spe = paste(unlist(gbmGrid),collapse="-")
each_method="gbm_test"
gbm_result_dir=paste(c("./proline_classifier/rmsd_cluster_hits_rmsd/"),collapse="")
to_save_file=paste(c(gbm_result_dir,"",loop_type,"_",paste(c(each_method,cluster_dis,parameter_spe),collapse="-"),"_final_model.rds"),collapse="")
data=data_by_loop_type_list_unduplicated[[loop_type]][[1]]
data$cluster_type=sub("-","_",data$cluster_type)
data$cluster_type=as.factor(as.character(data$cluster_type))
#sequences$rmsd_cluster = as.character(sequences$rmsd_cluster)
sequences=data
features = data_by_loop_type_list_unduplicated[[loop_type]][[4]]
each_loop_length_data_feature_string=as.formula(paste(c("cluster_type ~ ",paste(features,collapse=" + ")),collapse=""))
all_cases =  sequences[,c(features,"id","cluster_type")]
the_levels=unique(unlist(data_by_loop_type_list_unduplicated[[loop_type]][[1]][,features]))
for(each_f in features){
all_cases[,each_f]=factor(all_cases[,each_f],levels=the_levels)
}
all_cases=all_cases[complete.cases(all_cases), ]
all_cases$cluster_type=gsub("-","_",all_cases$cluster_type)
all_cases$cluster_type=gsub(",",".",all_cases$cluster_type)
all_cases$cluster_type=gsub("\\*","none",all_cases$cluster_type)
all_cases$cluster_type=as.factor(as.character(all_cases$cluster_type))
gbmGrid
train_final_model<-function(each_loop_length_data_feature_string_rmsd,each_method,training_cases,gbmGrid){
# to add classes to off set
training_cases=even_out_all_classes(training_cases)
if(dim(training_cases)[1]*0.6*0.5 < as.numeric(as.character(gbmGrid[["n.minobsinnode"]]))){
training_cases=rbind(training_cases,training_cases)
training_cases=rbind(training_cases,training_cases)
}
set.seed(1)
r <-1 # number of repeats
k <- 1 # number of folds
returned_results=make_3_10_cross_val(training_cases,r,k)  # make division
folds_spec=returned_results[[1]]
training_cases=returned_results[[2]]   # the training cases would have its mo
folds.list.out=folds_spec[[1]]
folds.list=folds_spec[[2]]
fitControl <- trainControl(method = "none",
## Estimate class probabilities
classProbs = TRUE,
returnResamp="all",
## Evaluate performance using
## the following function
savePredictions="final",
summaryFunction = multiClassSummary)
trained_model=""
trained_model <- train(each_loop_length_data_feature_string_rmsd, data = training_cases,
#distribution = "adaboost",
method = "gbm", bag.fraction = 0.5,   # fold number 10
#nTrain = round(nrow(training_cases) *.75),
trControl = fitControl,
tuneGrid = gbmGrid,
verbose = TRUE,
## Specify which metric to optimize
metric = "kappa")
return(trained_model)
}
trained_model = train_final_model(each_loop_length_data_feature_string,each_method,all_cases,gbmGrid)
trained_model
to_save_file
clean()
