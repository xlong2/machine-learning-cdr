ymax=Accuracy+AccuracySD/2))+geom_errorbar( width=0.9)  +
geom_line()+facet_wrap(~loop_type,scales="free",nrow=1 )+
theme_classic()+ ggtitle(this_loop)+
theme(plot.title = element_text(hjust = 0.5, size=14,color = "black"),axis.title.x=element_blank(),axis.text.x=element_blank(),axis.text.y=element_text(size=11),axis.title.y=element_blank())+
geom_hline(data = blind_blast_accuracy_this_loop, aes(yintercept = mean))+  theme(legend.position="none")
ggplot_list[["L1_1"]]=pk
blind_blast_accuracy_this_loop=blind_blast_accuracy[blind_blast_accuracy$loop_type %in% result_this_loop_part2$loop_type,]
pk=ggplot(result_this_loop_part2, aes(x=n.trees, y=Accuracy,group=interaction.depth,
color=interaction.depth,ymin=Accuracy-AccuracySD/2,
ymax=Accuracy+AccuracySD/2))+geom_errorbar( width=0.9)  +
geom_line()+facet_wrap(~loop_type,scales="free",nrow=1 )+
theme_classic()+ ggtitle(this_loop)+
theme(plot.title = element_text(hjust = 0.5, size=14,color = "black"),axis.title.x=element_blank(),axis.text.x=element_blank(),axis.text.y=element_text(size=11),axis.title.y=element_blank())+
geom_hline(data = blind_blast_accuracy_this_loop, aes(yintercept = mean))+  theme(legend.position="none")
ggplot_list[["L1_2"]]=pk
}else{
if(this_loop=="L3"){
pk=ggplot(result_this_loop, aes(x=n.trees, y=Accuracy,group=interaction.depth,
color=interaction.depth,ymin=Accuracy-AccuracySD/2,
ymax=Accuracy+AccuracySD/2))+geom_errorbar( width=0.9)  +
geom_line()+ggtitle(this_loop)+theme_bw()+facet_wrap(~loop_type,scales="free" ,nrow=1)+
theme_classic()+xlab("# Trees")+
theme(plot.title = element_text(hjust = 0.5, size=14,color = "black"),axis.title.x=element_text(size=12,hjust=0.5),axis.text.x=element_text(size=11),axis.text.y=element_text(size=11),axis.title.y=element_blank())+
geom_hline(data = blind_blast_accuracy_this_loop, aes(yintercept = mean))+  theme(legend.position="none")
ggplot_list[[this_loop]]=pk
}else{
pk=ggplot(result_this_loop, aes(x=n.trees, y=Accuracy,group=interaction.depth,
color=interaction.depth,ymin=Accuracy-AccuracySD/2,
ymax=Accuracy+AccuracySD/2))+geom_errorbar( width=0.9)  +
geom_line()+ggtitle(this_loop)+theme_bw()+facet_wrap(~loop_type,scales="free" ,nrow=1)+
theme_classic()+
theme(plot.title = element_text(hjust = 0.5, size=14,color = "black"),axis.title.x=element_blank(),axis.text.x=element_blank(),axis.text.y=element_text(size=11),axis.title.y=element_blank())+
geom_hline(data = blind_blast_accuracy_this_loop, aes(yintercept = mean))+  theme(legend.position="none")
ggplot_list[[this_loop]]=pk
}
}
# ggtitle("Gradient Boost Machine model complexity tuning") +
}
file_name="./proline_classifier/plots/gbm_grid_search_new.pdf"
pdf(file_name,  width = 9, height = 13) # Open a new pdf file
file_name="./proline_classifier/plots/gbm_grid_search_new.pdf"
pdf(file_name,  width = 9, height = 9) # Open a new pdf file
p=grid.arrange(grobs = ggplot_list, layout_matrix = lay)
dev.off()
pk=ggplot(result_this_loop, aes(x=n.trees, y=Accuracy,group=interaction.depth,
color=interaction.depth,ymin=Accuracy-AccuracySD/2,
ymax=Accuracy+AccuracySD/2))+geom_errorbar( width=0.9)  +
geom_line()+ggtitle(this_loop)+theme_bw()+facet_wrap(~loop_type,scales="free" ,nrow=1)+
theme_classic()+xlab("# Trees")+
theme(plot.title = element_text(hjust = 0.5, size=14,color = "black"),axis.title.x=element_text(size=12,hjust=0.5),axis.text.x=element_text(size=11),axis.text.y=element_text(size=11),axis.title.y=element_blank())+
geom_hline(data = blind_blast_accuracy_this_loop, aes(yintercept = mean))+  theme(legend.position="none")
file_name="./proline_classifier/plots/gbm_grid_search_new_L3.pdf"
pdf(file_name,  width = 9, height = 3) # Open a new pdf file
p=grid.arrange(grobs = pk)
dev.off()
pdf(file_name,  width = 9, height = 3) # Open a new pdf file
pk
dev.off()
for( this_loop in names(results_by_loop)){
result_this_loop=results_by_loop[[this_loop]]
blind_blast_accuracy_this_loop=blind_blast_accuracy[blind_blast_accuracy$loop_type %in% result_this_loop$loop_type,]
result_this_loop$loop_length=as.numeric(sapply(strsplit(result_this_loop$loop_type,"_"),"[[",2))
result_this_loop=result_this_loop[order(result_this_loop$loop_length, decreasing = FALSE),]
k=as.numeric(sapply(strsplit(unique(result_this_loop$loop_type),"_"),"[[",2))
result_this_loop$loop_type=factor(result_this_loop$loop_type,levels=unique(result_this_loop$loop_type)[order(k)])
blind_blast_accuracy_this_loop$loop_type=factor(blind_blast_accuracy_this_loop$loop_type,
levels=levels(result_this_loop$loop_type))
if(this_loop=="L1"){
result_this_loop_part1=result_this_loop[result_this_loop$loop_type%in%c("L1_11","L1_12","L1_13","L1_14"),]
blind_blast_accuracy_this_loop=blind_blast_accuracy[blind_blast_accuracy$loop_type %in% result_this_loop_part1$loop_type,]
result_this_loop_part2=result_this_loop[result_this_loop$loop_type%in%c("L1_15","L1_16"),]
pk=ggplot(result_this_loop_part1, aes(x=n.trees, y=Accuracy,group=interaction.depth,
color=interaction.depth,ymin=Accuracy-AccuracySD/2,
ymax=Accuracy+AccuracySD/2))+geom_errorbar( width=0.9)  +
geom_line()+facet_wrap(~loop_type,scales="free",nrow=1 )+
theme_classic()+ ggtitle(this_loop)+
theme(plot.title = element_text(hjust = 0.5, size=14,color = "black"),axis.title.x=element_blank(),axis.text.x=element_blank(),axis.text.y=element_text(size=11),axis.title.y=element_blank())+
geom_hline(data = blind_blast_accuracy_this_loop, aes(yintercept = mean))+  theme(legend.position="none")
ggplot_list[["L1_1"]]=pk
blind_blast_accuracy_this_loop=blind_blast_accuracy[blind_blast_accuracy$loop_type %in% result_this_loop_part2$loop_type,]
pk=ggplot(result_this_loop_part2, aes(x=n.trees, y=Accuracy,group=interaction.depth,
color=interaction.depth,ymin=Accuracy-AccuracySD/2,
ymax=Accuracy+AccuracySD/2))+geom_errorbar( width=0.9)  +
geom_line()+facet_wrap(~loop_type,scales="free",nrow=1 )+
theme_classic()+ ggtitle(this_loop)+
theme(plot.title = element_text(hjust = 0.5, size=14,color = "black"),axis.title.x=element_blank(),axis.text.x=element_blank(),axis.text.y=element_text(size=11),axis.title.y=element_blank())+
geom_hline(data = blind_blast_accuracy_this_loop, aes(yintercept = mean))+  theme(legend.position="none")
ggplot_list[["L1_2"]]=pk
}else{
if(this_loop=="L3"){
pk=ggplot(result_this_loop, aes(x=n.trees, y=Accuracy,group=interaction.depth,
color=interaction.depth,ymin=Accuracy-AccuracySD/2,
ymax=Accuracy+AccuracySD/2))+geom_errorbar( width=0.9)  +
geom_line()+ggtitle(this_loop)+theme_bw()+facet_wrap(~loop_type,scales="free" ,nrow=1)+
theme_classic()+xlab("# Trees")+
theme(plot.title = element_text(hjust = 0.5, size=14,color = "black"),axis.title.x=element_text(size=12,hjust=0.5),axis.text.x=element_text(size=11),axis.text.y=element_text(size=11),axis.title.y=element_blank())+
geom_hline(data = blind_blast_accuracy_this_loop, aes(yintercept = mean))+  theme(legend.position="none")
file_name="./proline_classifier/plots/gbm_grid_search_new_L3.pdf"
pdf(file_name,  width = 9, height = 3) # Open a new pdf file
pk
dev.off()
}
pk=ggplot(result_this_loop, aes(x=n.trees, y=Accuracy,group=interaction.depth,
color=interaction.depth,ymin=Accuracy-AccuracySD/2,
ymax=Accuracy+AccuracySD/2))+geom_errorbar( width=0.9)  +
geom_line()+ggtitle(this_loop)+theme_bw()+facet_wrap(~loop_type,scales="free" ,nrow=1)+
theme_classic()+
theme(plot.title = element_text(hjust = 0.5, size=14,color = "black"),axis.title.x=element_blank(),axis.text.x=element_blank(),axis.text.y=element_text(size=11),axis.title.y=element_blank())+
geom_hline(data = blind_blast_accuracy_this_loop, aes(yintercept = mean))+  theme(legend.position="none")
ggplot_list[[this_loop]]=pk
}
# ggtitle("Gradient Boost Machine model complexity tuning") +
}
file_name="./proline_classifier/plots/gbm_grid_search_new.pdf"
pdf(file_name,  width = 9, height = 9) # Open a new pdf file
p=grid.arrange(grobs = ggplot_list, layout_matrix = lay)
dev.off()
if(this_loop=="L3"){
pk=ggplot(result_this_loop, aes(x=n.trees, y=Accuracy,group=interaction.depth,
color=interaction.depth,ymin=Accuracy-AccuracySD/2,
ymax=Accuracy+AccuracySD/2))+geom_errorbar( width=0.9)  +
geom_line()+ggtitle(this_loop)+theme_bw()+facet_wrap(~loop_type,scales="free" ,nrow=1)+
theme_classic()+xlab("# Trees")+
theme(plot.title = element_text(hjust = 0.5, size=14,color = "black"),axis.title.x=element_text(size=12,hjust=0.5),axis.text.x=element_text(size=11),axis.text.y=element_text(size=11),axis.title.y=element_blank())+
geom_hline(data = blind_blast_accuracy_this_loop, aes(yintercept = mean))+  theme(legend.position="none")
file_name="./proline_classifier/plots/gbm_grid_search_new_L3.pdf"
a=list()
a[[1]]=pk
pdf(file_name,  width = 9, height = 3) # Open a new pdf file
p=grid.arrange(grobs = a, layout_matrix = c(1,1,1,1))
dev.off()
}
pk=ggplot(result_this_loop, aes(x=n.trees, y=Accuracy,group=interaction.depth,
color=interaction.depth,ymin=Accuracy-AccuracySD/2,
ymax=Accuracy+AccuracySD/2))+geom_errorbar( width=0.9)  +
geom_line()+ggtitle(this_loop)+theme_bw()+facet_wrap(~loop_type,scales="free" ,nrow=1)+
theme_classic()+xlab("# Trees")+
theme(plot.title = element_text(hjust = 0.5, size=14,color = "black"),axis.title.x=element_text(size=12,hjust=0.5),axis.text.x=element_text(size=11),axis.text.y=element_text(size=11),axis.title.y=element_blank())+
geom_hline(data = blind_blast_accuracy_this_loop, aes(yintercept = mean))+  theme(legend.position="none")
file_name="./proline_classifier/plots/gbm_grid_search_new_L3.pdf"
a=list()
a[[1]]=pk
pdf(file_name,  width = 9, height = 3) # Open a new pdf file
p=grid.arrange(grobs = a, layout_matrix = c(1,1,1,1))
lay
p=grid.arrange(grobs = a)
dev.off()
p=grid.arrange(grobs = a,layout=matrix(c(1,1,1,1)))
p
dev.off()
file_name="./proline_classifier/plots/gbm_grid_search_new_L3.pdf"
a=list()
a[[1]]=pk
pdf(file_name,  width = 9, height = 3) # Open a new pdf file
p=grid.arrange(grobs = a,layout=matrix(c(1,1,1,1)))
dev.off()
file_name="./proline_classifier/plots/gbm_grid_search_new_L3.pdf"
a=list()
pdf(file_name,  width = 9, height = 3) # Open a new pdf file
ggplot(result_this_loop, aes(x=n.trees, y=Accuracy,group=interaction.depth,
color=interaction.depth,ymin=Accuracy-AccuracySD/2,
ymax=Accuracy+AccuracySD/2))+geom_errorbar( width=0.9)  +
geom_line()+ggtitle(this_loop)+theme_bw()+facet_wrap(~loop_type,scales="free" ,nrow=1)+
theme_classic()+xlab("# Trees")+
theme(plot.title = element_text(hjust = 0.5, size=14,color = "black"),axis.title.x=element_text(size=12,hjust=0.5),axis.text.x=element_text(size=11),axis.text.y=element_text(size=11),axis.title.y=element_blank())+
geom_hline(data = blind_blast_accuracy_this_loop, aes(yintercept = mean))+  theme(legend.position="none")
dev.off()
ggplot(result_this_loop, aes(x=n.trees, y=Accuracy,group=interaction.depth,
color=interaction.depth,ymin=Accuracy-AccuracySD/2,
ymax=Accuracy+AccuracySD/2))+geom_errorbar( width=0.9)  +
geom_line()+ggtitle(this_loop)+theme_bw()+facet_wrap(~loop_type,scales="free" ,nrow=1)+
theme_classic()+xlab("# Trees")+
theme(plot.title = element_text(hjust = 0.5, size=14,color = "black"),axis.title.x=element_text(size=12,hjust=0.5),axis.text.x=element_text(size=11),axis.text.y=element_text(size=11),axis.title.y=element_blank())+
geom_hline(data = blind_blast_accuracy_this_loop, aes(yintercept = mean))+  theme(legend.position="none")
result_this_loop
ggplot(result_this_loop, aes(x=n.trees, y=Accuracy,group=interaction.depth,
color=interaction.depth,ymin=Accuracy-AccuracySD/2,
ymax=Accuracy+AccuracySD/2))+geom_errorbar( width=0.9)  +
geom_line()+ggtitle(this_loop)+theme_bw()+facet_wrap(~loop_type,scales="free" ,nrow=1)+
theme_classic()+xlab("# Trees")+
theme(plot.title = element_text(hjust = 0.5, size=14,color = "black"),axis.title.x=element_text(size=12,hjust=0.5),axis.text.x=element_text(size=11),axis.text.y=element_text(size=11),axis.title.y=element_blank())+
geom_hline(data = blind_blast_accuracy_this_loop, aes(yintercept = mean))+  theme(legend.position="none")
dev.off()
dev.off()
ggplot(result_this_loop, aes(x=n.trees, y=Accuracy,group=interaction.depth,
color=interaction.depth,ymin=Accuracy-AccuracySD/2,
ymax=Accuracy+AccuracySD/2))+geom_errorbar( width=0.9)  +
geom_line()+ggtitle(this_loop)+theme_bw()+facet_wrap(~loop_type,scales="free" ,nrow=1)+
theme_classic()+xlab("# Trees")+
theme(plot.title = element_text(hjust = 0.5, size=14,color = "black"),axis.title.x=element_text(size=12,hjust=0.5),axis.text.x=element_text(size=11),axis.text.y=element_text(size=11),axis.title.y=element_blank())+
geom_hline(data = blind_blast_accuracy_this_loop, aes(yintercept = mean))+  theme(legend.position="none")
dev.off()
pdf(file_name,  width = 9, height = 3) # Open a new pdf file
ggplot(result_this_loop, aes(x=n.trees, y=Accuracy,group=interaction.depth,
color=interaction.depth,ymin=Accuracy-AccuracySD/2,
ymax=Accuracy+AccuracySD/2))+geom_errorbar( width=0.9)  +
geom_line()+ggtitle(this_loop)+theme_bw()+facet_wrap(~loop_type,scales="free" ,nrow=1)+
theme_classic()+xlab("# Trees")+
theme(plot.title = element_text(hjust = 0.5, size=14,color = "black"),axis.title.x=element_text(size=12,hjust=0.5),axis.text.x=element_text(size=11),axis.text.y=element_text(size=11),axis.title.y=element_blank())+
geom_hline(data = blind_blast_accuracy_this_loop, aes(yintercept = mean))+  theme(legend.position="none")
dev.off()
file_name="./proline_classifier/plots/gbm_grid_search_new_L3.pdf"
a=list()
pdf(file_name,  width = 9, height = 3) # Open a new pdf file
ggplot(result_this_loop, aes(x=n.trees, y=Accuracy,group=interaction.depth,
color=interaction.depth,ymin=Accuracy-AccuracySD/2,
ymax=Accuracy+AccuracySD/2))+geom_errorbar( width=0.9)  +
geom_line()+ggtitle(this_loop)+theme_bw()+facet_wrap(~loop_type,scales="free" ,nrow=1)+
theme_classic()+xlab("# Trees")+
theme(plot.title = element_text(hjust = 0.5, size=14,color = "black"),axis.title.x=element_text(size=12,hjust=0.5),axis.text.x=element_text(size=11),axis.text.y=element_text(size=11),axis.title.y=element_blank())+
geom_hline(data = blind_blast_accuracy_this_loop, aes(yintercept = mean))
dev.off()
all_dis_frame
all_dis
library(ggplot2)
library(gridExtra)
library(reshape2)
library(grid)
data_by_loop_type_list_unduplicated=readRDS("./proline_classifier/data_by_loop_type_list_unduplicated_no_filtering.rds")
#make a plot of the the data
loop_distribution=lapply(data_by_loop_type_list_unduplicated,function(x){a=as.data.frame(table(x[[1]]$cluster_type));
k=a[order(a$Freq,decreasing=TRUE),]; gg=paste(strsplit(as.character(x[[1]][1,"loop_type"]),"_")[[1]][1:2],collapse="_"); k$loop=rep(gg,length(gg));
total=0
;return(k)})
library(ggplot2)
library(gridExtra)
library(reshape2)
library(grid)
data_by_loop_type_list_unduplicated=readRDS("./proline_classifier/data_by_loop_type_list_unduplicated_no_filtering.rds")
data_by_loop_type_list_unduplicated=readRDS("./proline_classifier/Data_raw/data_by_loop_type_list_unduplicated_no_filtering.rds")
getwd()
data_by_loop_type_list_unduplicated=readRDS("./proline_classifier/Data_processed/data_by_loop_type_list_unduplicated_no_filtering.rds")
#make a plot of the the data
loop_distribution=lapply(data_by_loop_type_list_unduplicated,function(x){a=as.data.frame(table(x[[1]]$cluster_type));
k=a[order(a$Freq,decreasing=TRUE),]; gg=paste(strsplit(as.character(x[[1]][1,"loop_type"]),"_")[[1]][1:2],collapse="_"); k$loop=rep(gg,length(gg));
total=0
;return(k)})
loop_distribution_total=do.call(rbind,loop_distribution)
loop_distribution_total=melt(loop_distribution_total,id.var=c("Var1","loop"))
loop_distribution_total$Var1=as.character(loop_distribution_total$Var1)
#  factor(loop_distribution_total$Var1,levels=c("1" ,  "2" , "3","4", "5" ,"6" ,"7","8",    "9",  "10", "11",  "cis6-1",   "cis7-1",   "cis7-2",    "cis7-3" ,  "cis7,8-1" ,"cis8-1" ,  "cis9-1"  , "none"))
names(loop_distribution_total)=c("cluster_identifier","loop","variable","case_number")
# plot the loop distribution
loop_distribution_total$loop_type=sapply(strsplit(loop_distribution_total$loop,"_"),"[[",1)
loop_distribution_total=do.call(rbind,lapply(split(loop_distribution_total,loop_distribution_total$loop_type),function(x){
x$dim=rep(dim(x)[1],dim(x)[1]);return(x)}))
loop_distribution_total$cluster_identifier=as.factor(loop_distribution_total$cluster_identifier)
splitted_loop=split(loop_distribution_total,loop_distribution_total$loop)
splitted_loop_large=split(loop_distribution_total,loop_distribution_total$loop_type)
loop_distribution_total$looplength=as.numeric(sapply(strsplit(as.character(loop_distribution_total$loop),"_"),"[[",2))
# generate colors
library(RColorBrewer)
n <- length(unique(loop_distribution_total$cluster_identifier))+1
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
col_vector=col_vector[c(1:3,5:(n))]
col_vector=c(col_vector,"#bdbdbd")
names(col_vector) <- c(as.character(unique(loop_distribution_total$cluster_identifier)),"other")
pie(rep(1,n), col=col_vector)
# extract legend
loop_distribution_total$cluster_identifier=
factor(loop_distribution_total$cluster_identifier,levels=c(levels(loop_distribution_total$cluster_identifier)[2:length(levels(loop_distribution_total$cluster_identifier))],"*"))
plot=ggplot(loop_distribution_total)+facet_wrap(~loop_type, scales = "free" )+
geom_bar(aes(x=loop,y=case_number,fill=cluster_identifier,width=0.8),position =  position_dodge(width = 0.90),stat = "identity",size=0.2)+
ggtitle("Canonical cdr loop cluster distribution")+theme(plot.title = element_text(hjust = 0.5))
loop_distribution_total_list=list()
loop_distribution_total_list=split(loop_distribution_total,loop_distribution_total$loop_type)
figure_dim_list=list(list(66,45),list(65,45),list(120,45),list(46,45),list(78,45))
loop_list=as.list(names(loop_distribution_total_list))
loop_distribution_total$looplength
for(index in 1:5){
dim_f=figure_dim_list[[index]]
the_data=loop_distribution_total_list[[index]]
the_data=the_data[order(the_data$looplength),]
the_data$position=the_data$case_number+7
the_data$looplength=as.factor(the_data$looplength)
the_data$fill_color=as.character(the_data$cluster_identifier);
length1= !(the_data$fill_color==1 | grepl("cis",the_data$fill_color))
the_data[length1,"fill_color"]=rep("other",length(which(length1==TRUE)))
the_data$fill_color=factor(the_data$fill_color)
#the_data$cluster_identifier=factor(the_data$cluster_identifier,levels=c(levels(the_data$cluster_identifier)[2:length(levels(the_data$cluster_identifier))],"*"))
aa=ggplot(data=the_data) +
geom_bar(stat = "identity", aes(x = cluster_identifier, y = case_number, fill=fill_color) ,position=position_dodge(width = 0.90))+
geom_text(data=the_data,aes(x=cluster_identifier,y=position,label=cluster_identifier),size=3.5,vjust=0,label.size = 9) +
facet_grid(~looplength,scales = "free_x", space="free")+ theme_classic()+
theme(
strip.text.x = element_text(size = 11, colour = "black"),
plot.margin=unit(c(2,2,2,2),"mm"),axis.title.x=element_blank(),
axis.title.y=element_blank(),axis.text.x=element_blank(),axis.ticks.x = element_blank(), axis.text.y = element_text(size=9)) +
scale_fill_manual("Legend", values = col_vector)+ theme(legend.position = "none")#+ geom_text(aes(label=cluster_identifier), vjust=0)
system("mkdir ./proline_classifier/Plots/")
file_name=paste(c("./proline_classifier/Plots/member_distribution_plot.",loop_list[[index]],".pdf"),collapse="")
ggsave(aa,file=file_name, width=dim_f[[1]],height=dim_f[[2]],units = c( "mm"))
}
girds=lapply(loop_distribution_total_list,function(x){
ggplot(data=x) +
geom_bar(stat = "identity", aes(x = cluster_identifier, y = case_number, fill=cluster_identifier) ,position=position_dodge(width = 0.90))+
facet_grid(~loop,scales = "free_x", space="free")+ theme(plot.margin=unit(c(2,0,0,2),"mm"),axis.title.x=element_blank(),axis.title.y=element_blank(),axis.text.x=element_blank(),axis.ticks.x = element_blank()) +scale_fill_manual("Legend", values = col_vector)+ theme(legend.position = "none")
})
loop_distribution_total$fill_color=loop_distribution_total$cluster_identifier
length1= !(loop_distribution_total$fill_color==1 | grepl("cis",loop_distribution_total$fill_color))
loop_distribution_total$fill_color=as.character(loop_distribution_total$cluster_identifier);
loop_distribution_total[length1,"fill_color"]=rep("other",length(which(length1==TRUE)))
the_data$fill_color=as.factor(the_data$fill_color)
plot=ggplot(data=loop_distribution_total) +
geom_bar(stat = "identity", aes(x = loop, y = case_number, fill=fill_color,width=1 ),position=position_dodge(width = 0.90))+
facet_grid(~loop_type,scales = "free", space="free")+scale_fill_manual("Legend", values = col_vector)+
labs(cluster_identifier="loop&length type")+   guides(fill=guide_legend(title="Cluster identifier"))# add guide properties by aesthetic#Extract Legend
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
legend <- g_legend(plot)
legend_plot=grid.draw(legend)
p=grid.arrange(arrangeGrob(legend, ncol=1, nrow=1),  widths=c(24),heights=c(101))
data_by_loop_type_list_unduplicated=readRDS("./proline_classifier/Data_processed/data_by_loop_type_list_unduplicated_no_filtering.rds")
#make a plot of the the data
loop_distribution=lapply(data_by_loop_type_list_unduplicated,function(x){a=as.data.frame(table(x[[1]]$cluster_type));
k=a[order(a$Freq,decreasing=TRUE),]; gg=paste(strsplit(as.character(x[[1]][1,"loop_type"]),"_")[[1]][1:2],collapse="_"); k$loop=rep(gg,length(gg));
total=0
;return(k)})
loop_distribution_total=do.call(rbind,loop_distribution)
loop_distribution_total=melt(loop_distribution_total,id.var=c("Var1","loop"))
loop_distribution_total$Var1=as.character(loop_distribution_total$Var1)
#  factor(loop_distribution_total$Var1,levels=c("1" ,  "2" , "3","4", "5" ,"6" ,"7","8",    "9",  "10", "11",  "cis6-1",   "cis7-1",   "cis7-2",    "cis7-3" ,  "cis7,8-1" ,"cis8-1" ,  "cis9-1"  , "none"))
names(loop_distribution_total)=c("cluster_identifier","loop","variable","case_number")
# plot the loop distribution
loop_distribution_total$loop_type=sapply(strsplit(loop_distribution_total$loop,"_"),"[[",1)
loop_distribution_total=do.call(rbind,lapply(split(loop_distribution_total,loop_distribution_total$loop_type),function(x){
x$dim=rep(dim(x)[1],dim(x)[1]);return(x)}))
loop_distribution_total$cluster_identifier=as.factor(loop_distribution_total$cluster_identifier)
splitted_loop=split(loop_distribution_total,loop_distribution_total$loop)
splitted_loop_large=split(loop_distribution_total,loop_distribution_total$loop_type)
loop_distribution_total$looplength=as.numeric(sapply(strsplit(as.character(loop_distribution_total$loop),"_"),"[[",2))
# generate colors
library(RColorBrewer)
n <- length(unique(loop_distribution_total$cluster_identifier))+1
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
col_vector=col_vector[c(1:3,5:(n))]
col_vector=c(col_vector,"#bdbdbd")
names(col_vector) <- c(as.character(unique(loop_distribution_total$cluster_identifier)),"other")
pie(rep(1,n), col=col_vector)
# extract legend
loop_distribution_total$cluster_identifier=
factor(loop_distribution_total$cluster_identifier,levels=c(levels(loop_distribution_total$cluster_identifier)[2:length(levels(loop_distribution_total$cluster_identifier))],"*"))
plot=ggplot(loop_distribution_total)+facet_wrap(~loop_type, scales = "free" )+
geom_bar(aes(x=loop,y=case_number,fill=cluster_identifier,width=0.8),position =  position_dodge(width = 0.90),stat = "identity",size=0.2)+
ggtitle("Canonical cdr loop cluster distribution")+theme(plot.title = element_text(hjust = 0.5))
loop_distribution_total_list=list()
loop_distribution_total_list=split(loop_distribution_total,loop_distribution_total$loop_type)
figure_dim_list=list(list(66,45),list(65,45),list(120,45),list(46,45),list(78,45))
loop_list=as.list(names(loop_distribution_total_list))
loop_distribution_total$looplength
for(index in 1:5){
dim_f=figure_dim_list[[index]]
the_data=loop_distribution_total_list[[index]]
the_data=the_data[order(the_data$looplength),]
the_data$position=the_data$case_number+7
the_data$looplength=as.factor(the_data$looplength)
the_data$fill_color=as.character(the_data$cluster_identifier);
length1= !(the_data$fill_color==1 | grepl("cis",the_data$fill_color))
the_data[length1,"fill_color"]=rep("other",length(which(length1==TRUE)))
the_data$fill_color=factor(the_data$fill_color)
#the_data$cluster_identifier=factor(the_data$cluster_identifier,levels=c(levels(the_data$cluster_identifier)[2:length(levels(the_data$cluster_identifier))],"*"))
aa=ggplot(data=the_data) +
geom_bar(stat = "identity", aes(x = cluster_identifier, y = case_number, fill=fill_color) ,position=position_dodge(width = 0.90))+
geom_text(data=the_data,aes(x=cluster_identifier,y=position,label=cluster_identifier),size=3.5,vjust=0,label.size = 9) +
facet_grid(~looplength,scales = "free_x", space="free")+ theme_classic()+
theme(
strip.text.x = element_text(size = 11, colour = "black"),
plot.margin=unit(c(2,2,2,2),"mm"),axis.title.x=element_blank(),
axis.title.y=element_blank(),axis.text.x=element_blank(),axis.ticks.x = element_blank(), axis.text.y = element_text(size=9)) +
scale_fill_manual("Legend", values = col_vector)+ theme(legend.position = "none")#+ geom_text(aes(label=cluster_identifier), vjust=0)
system("mkdir ./proline_classifier/Plots/")
file_name=paste(c("./proline_classifier/Plots/member_distribution_plot.",loop_list[[index]],".pdf"),collapse="")
ggsave(aa,file=file_name, width=dim_f[[1]],height=dim_f[[2]],units = c( "mm"))
}
loop_distribution_total_list
loop_distribution
# plot the data distribution
# plot the data
data_by_loop_type_list_unduplicated[["H2_10"]][[1]]
# plot the data distribution
# plot the data
data=data_by_loop_type_list_unduplicated[["H2_10"]][[1]]
data
data_by_cluster_type=split(data,data$cluster_type)
names(data_by_cluster_type)
data_by_cluster_type[[1]]
data_by_cluster_type[["1"]]
table(data_by_cluster_type[["1"]]$cluster_type)
cluster_1_data=data_by_cluster_type[["1"]]
cluster_1_data
cluster_1_data[,paste("V",2:11,sep="")]
sapply(cluster_1_data[,paste("V",2:11,sep="")],1,function(x){paste(x,collapse="")})
cluster_1_data[,paste("V",2:11,sep="")]
sapply(cluster_1_data[,paste("V",2:11,sep="")],1,function(x){paste(x,collapse="")})
cluster_1_data[,paste("V",2:11,sep="")]
sapply(cluster_1_data[,paste("V",2:11,sep="")],1,print)
sapply(cluster_1_data[,paste("V",2:11,sep="")],function(x){paste(x,collapse="")})
sapply(cluster_1_data[,paste("V",2:11,sep="")],function(x){paste(unlist(x),collapse="")})
sapply(as.data.frame(cluster_1_data[,paste("V",2:11,sep="")]),function(x){paste(unlist(x),collapse="")})
sapply(t(as.data.frame(cluster_1_data[,paste("V",2:11,sep="")])),function(x){paste(unlist(x),collapse="")})
sapply(as.data.frame(t((cluster_1_data[,paste("V",2:11,sep="")]))),function(x){paste(unlist(x),collapse="")})
seqs=sapply(as.data.frame(t((cluster_1_data[,paste("V",2:11,sep="")]))),function(x){paste(unlist(x),collapse="")})
seqs
seqs[[1]]
weblogo(seqs,format='png',sequence.type='protein')
install.packages(‘RWebLogo’)
install.packages("RWebLogo")
library("RWebLogo")
weblogo(seqs,format='png',sequence.type='protein', file.out="seqlogo")
getwd()
weblogo(seqs,format='png',sequence.type='protein', file.out="seqlogo")
weblogo(seqs,format='pdf',sequence.type='protein', file.out="seqlogo")
seqs
weblogo(unlist(seqs),format='png',sequence.type='protein', file.out="seqlogo")
weblogo(unlist(seqs),format='png',sequence.type='protein')
seqs
seqs[1]
seqs[2]
seqs[3]
seqs[4]
seqs[5]
seqs[6]
seqs
seqs[12]
seqs[13]
seqs[4]
seqs[54]
seqs[53]
seqs[52]
seqs[23]
seqs[20]
seqs[19]
all_right_sig_info
all_lsit_frame
outcluster_similarity
all_lsit_frame
install.packages("findpython")
install.packages("findpython")
weblogo(unlist(seqs),format='png',sequence.type='protein', file.out="seqlogo")
help("weblogo")
# Make a sequence logo using an external alignment file format
# In this example we'll use the EMBOSS alignment format or msf
# However, you can use any format supported by WebLogo e.g. fasta
fpath = system.file("extdata", "example_data.msf", package="RWebLogo")
weblogo(file.in=fpath)
# Now for an example using an alignment as an R character vector
aln <- c('CCAACCCAA', 'CCAACCCTA', 'AAAGCCTGA', 'TGAACCGGA')
# Simple WebLogo
weblogo(seqs=aln)
# Lets get rid of those ugly error bars and add some text!
weblogo(seqs=aln, errorbars=FALSE, title='Yay, No error bars!',
fineprint='RWebLogo 1.0', label='1a')
# We can also change the format of the output like this
weblogo(seqs=aln, format='png', resolution=500)
# You can change the axis labels like this
weblogo(seqs=aln, xlabel='My x-axis', ylabel='Awesome bits')
# You get the idea! See ?weblogo for more awesome options!
aln <- c('CCAACCCAA', 'CCAACCCTA', 'AAAGCCTGA', 'TGAACCGGA')
# Simple WebLogo
weblogo(seqs=aln)
system("cmd.exe", input = "notepad")
all_lsit_frame$query_to_clustercen=as.numeric(all_lsit_frame$query_to_clustercen)
plot(density(all_lsit_frame[all_lsit_frame$query_cluster=="H1-13-1","query_to_clustercen"]))
system("cmd.exe", input = "notepad")
system("bash -l", input = "notepad")
system("cmd.exe", input = "notepad")
system2("start notepad")
library(seqLogo)
install.packages("seqLogo")
library("RWebLogo")
library("RWebLogo")
install.packages("seqLogo")
library("seqLogo")
library("seqLogo")
library("seqLogo")
library("WebLogo")
library("WebLogo")
library("WebLogo")
install.packages("WebLogo")
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("seqLogo")
install.packages('RWebLogo')
library('RWebLogo')
# Example alignment
aln <- c('CCAACCCAA', 'CCAACCCTA', 'AAAGCCTGA', 'TGAACCGGA')
# Generate the logo in the file mylogo.pdf
weblogo(seqs=aln, file.out='mylogo.pdf')
install.packages("RWebLogo")
# Example alignment
aln <- c('CCAACCCAA', 'CCAACCCTA', 'AAAGCCTGA', 'TGAACCGGA')
# Generate the logo in the file mylogo.pdf
weblogo(seqs=aln, file.out='mylogo.pdf')
library('RWebLogo')
aln <- c('CCAACCCAA', 'CCAACCCTA', 'AAAGCCTGA', 'TGAACCGGA')
# Generate the logo in the file mylogo.pdf
weblogo(seqs=aln, file.out='mylogo.pdf')
aln
weblogo(seqs=aln, file.out='mylogo.pdf')
mylogo.pdf
plot_a=ggplot(all_lsit_frame_H1_13)+geom_point(alpha=0.7,aes(x=outcluster_similarity,y=incluster_similarity,color=cluster))+
facet_wrap(~query_cluster,scales="free")+geom_abline()+ ylab("best in cluster similarity")+ xlab("best out of cluster similarity")+theme_classic() +theme(axis.text=element_text(size=9),
axis.title=element_text(size=9,face="bold"))
all_lsit_frame_H1_13= all_lsit_frame[grepl("H1-13",all_lsit_frame[,"type"]),]
most_similar_score_result=readRDS("./proline_classifier/Data_processed/most_similar_score_result.rds")
# make a plot to show the most similar similarity scores within and out of the correct cluster
all_list=list()
